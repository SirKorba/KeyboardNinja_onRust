import { Button, VerticalBox, GridBox, LineEdit, HorizontalBox } from "std-widgets.slint";


component AppText inherits Text {
    horizontal-alignment: center;
    font-size: 28px;
    font-weight: 700;
    color: white;   
}

component KeyboardButton inherits Rectangle {
    in property <string> text;
    in property <string> rutext;
    in property <color> bcolor;
    in property <string> lang;

    in-out property <bool> is_pressed: false;

    Text {
        text: (root.lang == "en" || root.rutext == "")?text:rutext;
        horizontal-alignment: center;
        color: white;
        font-size: 16px;

    }
    border-color: bcolor;
    background: is_pressed ? white:black;
    animate background {
         duration: 200ms;
    }
    border-width: 1px;
    width: 32px; height: 32px;
}

export component AppWindow inherits Window {

    in-out property <string> char;
    in-out property <string> event;
    in-out property <bool> is_correct_event: true;

    in-out property <int> count_correct: 0;
    in-out property <int> count_incorrect: 0;

    in-out property <bool> is_main_mode: true;
    in-out property <bool> is_char_mode: false;
    in-out property <bool> is_sentence_mode: false;

    in-out property <string> correct_sentence;
    in-out property <string> input_sentence;
    in-out property <string> edit_string;
    in-out property <string> keyboard_event;
    in-out property <bool> is_correct_sentence;
    in-out property <string> lang: "en";

    callback key_accept();

    callback sentence_accept();
    callback keyboard_key_accept();
    callback change_lang();


    width: 1000px;
    height: 500px;
    background: #212325;

    VerticalBox {

        visible: is_main_mode ? true:false;

        Text {
            AppText {text: "Main";}
        }

        Button {
            text: "CharMode";

            clicked => {
                root.is_main_mode = false;
                root.is_char_mode = true;
                input_ch.focus();
            }
        }

        Button {
            text: "SentenceMode";

            clicked => {
                root.is_main_mode = false;
                root.is_sentence_mode = true;
                input_sent.focus();
            }
        }
    }

    VerticalLayout {
        visible: is_sentence_mode ? true:false;

        AppText {text: "\{root.correct_sentence}"; }

        FocusScope{
            input_sent := LineEdit {

                horizontal-alignment: center;
                font-size: 16px;
                width: 400px;
                height: 30px;
                x: 300px;
                padding: 20px;
                placeholder-text: "Enter text here";

                accepted(sentence) => {
                    root.input_sentence = sentence;
                    sentence_accept();
                    if (is_correct_sentence == true) {
                        self.text  = "";
                    }
                }
                edited(edit_string) => {
                    root.edit_string = edit-string;
                    keyboard_key_accept()
                }
            }
            key-pressed(event) => {
                if (event.text == Key.Shift) {
                    root.keyboard_event = "Shift";
                }
                if (event.text == Key.Alt) {
                    root.keyboard_event = "LAlt";
                }
                if (event.text == Key.AltGr) {
                    root.keyboard_event = "RAlt";
                }
                
                accept
            }
        }

        Button {
            text: root.lang;
            width: 64px;
            x: 232px;
            clicked => {
                if (root.lang == "en") {
                    root.lang = "ru";
                } else {
                    root.lang = "en";
                }
                change_lang()
            }
        }

        VerticalBox {

            x: 228px;

            HorizontalLayout {
                spacing: 5px;

                KeyboardButton {lang: root.lang; text: "`"; rutext: "Ё"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext) == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "1"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext) == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "2"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "3"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "4"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "5"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "6"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "7"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "8"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "9"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "0"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "-"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "="; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "BSpace"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 72px;}
            }
            HorizontalLayout {
                spacing: 5px;

                KeyboardButton {lang: root.lang; text: "TAB"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 56px;}
                KeyboardButton {lang: root.lang; text: "Q"; rutext: "Й"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "W"; rutext: "Ц"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "E"; rutext: "У"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "R"; rutext: "К"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "T"; rutext: "Е"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "Y"; rutext: "Н"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "U"; rutext: "Г"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "I"; rutext: "Ш"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "O"; rutext: "Щ"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "P"; rutext: "З"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "["; rutext: "Х"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "]"; rutext: "Ъ"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "\\"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 48px;}
            }
            HorizontalLayout {
                spacing: 5px;

                KeyboardButton {lang: root.lang; text: "CLock"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 70px;}
                KeyboardButton {lang: root.lang; text: "A"; rutext: "Ф"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "S"; rutext: "Ы"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "D"; rutext: "В"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "F"; rutext: "А"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "G"; rutext: "П"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "H"; rutext: "Р"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "J"; rutext: "О"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "K"; rutext: "Л"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "L"; rutext: "Д"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: ";"; rutext: "Ж"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "'"; rutext: "Э"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "Enter"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 72px;}
            }
            HorizontalLayout {
                spacing: 5px;

                KeyboardButton {lang: root.lang; text: "Shift"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 90px;}
                KeyboardButton {lang: root.lang; text: "Z"; rutext: "Я"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "X"; rutext: "Ч"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "C"; rutext: "С"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "V"; rutext: "М"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "B"; rutext: "И"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "N"; rutext: "Т"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "M"; rutext: "Ь"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: ","; rutext: "Б"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "."; rutext: "Ю"; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "/"; rutext: "."; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "Shift"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 90px;}
            }
            HorizontalLayout {
                spacing: 5px;

                KeyboardButton {lang: root.lang; text: "LCtrl"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 64px;}
                KeyboardButton {lang: root.lang; text: "Fn"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "Win"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false;}
                KeyboardButton {lang: root.lang; text: "LAlt"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 64px;}
                KeyboardButton {lang: root.lang; text: "Space"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 205px;}
                KeyboardButton {lang: root.lang; text: "RAlt"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 64px;}
                KeyboardButton {lang: root.lang; text: "RCtrl"; rutext: ""; bcolor: white; is_pressed: (((lang == "en"|| self.rutext == "")?self.text:self.rutext)  == keyboard_event) ? true:false; width: 64px;}
            }
        }

        AppText {
            text: "Correct: \{root.count_correct}\nIncorrect: \{root.count_incorrect}";
        }
    
        Button {
            width: 400px;
            height: 100px;
            x: 300px;
            padding-top: 200px;
            text: "Exit";

            clicked => {
                root.is_sentence_mode = false;
                root.is_main_mode = true;
                root.sentence_accept();
            }
        }
    }
    
    VerticalBox {

        visible: is_char_mode ? true:false;
        

        AppText {
            text: "Press button:";
        }

        AppText {
            text: "\{root.char}";
            color: is_correct_event ? white:red;
            animate color {
                 duration: 250ms;
            }
        }

        Button {
            text: root.lang;
            width: 64px;
            x: 232px;
            clicked => {
                if (root.lang == "en") {
                    root.lang = "ru";
                } else {
                    root.lang = "en";
                }
                change_lang()
            }
        }
        
        input_ch := FocusScope {       

            key-pressed(event) => {
                root.event = event.text;
                if (event.text == Key.Shift || event.text == Key.ShiftR) {
                    root.event = "Shift";
                }
                root.key_accept();
                accept
            }
        }
        
        AppText {
            text: "Correct: \{root.count_correct}\nIncorrect: \{root.count_incorrect}";
        }

        Button {
            text: "Exit";
            height: 100px;

            clicked => {
                root.is_char_mode = false;
                root.is_main_mode = true;
                root.key_accept();
                root.is_correct_event = true;
            }
        }

    }
}